input AddResourceToLandInput {
  resourceId: ID!
  landId: ID!
  clientMutationId: String!
}

type AddResourceToLandPayload {
  landEdge: LandEdge
  resourceEdge: ResourceEdge
  resource: Resource
  land: Land
  clientMutationId: String!
}

input AddResourceToProjectInput {
  resourceId: ID!
  projectId: ID!
  clientMutationId: String!
}

type AddResourceToProjectPayload {
  projectEdge: ProjectEdge
  resourceEdge: ResourceEdge
  resource: Resource
  project: Project
  clientMutationId: String!
}

input AddResourceToTaskInput {
  resourceId: ID!
  taskId: ID!
  clientMutationId: String!
}

type AddResourceToTaskPayload {
  taskEdge: TaskEdge
  resourceEdge: ResourceEdge
  resource: Resource
  task: Task
  clientMutationId: String!
}

input DeleteLandInput {
  landId: ID!
  userId: ID!
  clientMutationId: String!
}

type DeleteLandPayload {
  removedLandID: ID
  master: Master
  user: User
  clientMutationId: String!
}

input DeleteProjectInput {
  projectId: ID!
  clientMutationId: String!
}

type DeleteProjectPayload {
  removedProjectID: ID
  master: Master
  clientMutationId: String!
}

input DeleteResourceInput {
  resourceId: ID!
  userId: ID!
  clientMutationId: String!
}

type DeleteResourcePayload {
  removedResourceID: ID
  master: Master
  user: User
  clientMutationId: String!
}

input DeleteTaskInput {
  taskId: ID!
  clientMutationId: String!
}

type DeleteTaskPayload {
  removedTaskID: ID
  master: Master
  clientMutationId: String!
}

input DeleteUserInput {
  userId: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  removedUserID: ID
  master: Master
  clientMutationId: String!
}

type Land implements Node {
  id: ID!
  name: String
  location: String
  description: String
  category: String
  image: String
  admins(after: String, first: Int, before: String, last: Int): UserConnection
  likedBy(after: String, first: Int, before: String, last: Int): UserConnection
  resources(after: String, first: Int, before: String, last: Int): ResourceConnection
  resourcesPending(after: String, first: Int, before: String, last: Int): ResourceConnection
  projects(after: String, first: Int, before: String, last: Int): ProjectConnection
}

input landAttributes {
  name: String
  location: String
  description: String
  category: String
  image: String
}

type LandConnection {
  pageInfo: PageInfo!
  edges: [LandEdge]
}

type LandEdge {
  node: Land
  cursor: String!
}

input LikeLandInput {
  userId: ID!
  landId: ID!
  clientMutationId: String!
}

type LikeLandPayload {
  landEdge: LandEdge
  userEdge: UserEdge
  user: User
  land: Land
  clientMutationId: String!
}

input LikeProjectInput {
  userId: ID!
  projectId: ID!
  clientMutationId: String!
}

type LikeProjectPayload {
  projectEdge: ProjectEdge
  userEdge: UserEdge
  user: User
  project: Project
  clientMutationId: String!
}

input LikeResourceInput {
  userId: ID!
  resourceId: ID!
  clientMutationId: String!
}

type LikeResourcePayload {
  resourceEdge: ResourceEdge
  userEdge: UserEdge
  user: User
  resource: Resource
  clientMutationId: String!
}

type Master implements Node {
  id: ID!
  users(after: String, first: Int, before: String, last: Int): UserConnection
  resources(after: String, first: Int, before: String, last: Int): ResourceConnection
  lands(after: String, first: Int, before: String, last: Int): LandConnection
  projects(after: String, first: Int, before: String, last: Int): ProjectConnection
  tasks(after: String, first: Int, before: String, last: Int): TaskConnection
}

type Mutation {
  addResourceToLand(input: AddResourceToLandInput!): AddResourceToLandPayload
  addResourceToProject(input: AddResourceToProjectInput!): AddResourceToProjectPayload
  addResourceToTask(input: AddResourceToTaskInput!): AddResourceToTaskPayload
  deleteLand(input: DeleteLandInput!): DeleteLandPayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
  deleteResource(input: DeleteResourceInput!): DeleteResourcePayload
  deleteTask(input: DeleteTaskInput!): DeleteTaskPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  likeLand(input: LikeLandInput!): LikeLandPayload
  likeProject(input: LikeProjectInput!): LikeProjectPayload
  likeResource(input: LikeResourceInput!): LikeResourcePayload
  newLand(input: NewLandInput!): NewLandPayload
  newProject(input: NewProjectInput!): NewProjectPayload
  newResource(input: NewResourceInput!): NewResourcePayload
  newUser(input: NewUserInput!): NewUserPayload
  pendingResourceToLand(input: PendingResourceToLandInput!): PendingResourceToLandPayload
  pendingResourceToProject(input: PendingResourceToProjectInput!): PendingResourceToProjectPayload
  pendingResourceToTask(input: PendingResourceToTaskInput!): PendingResourceToTaskPayload
  removePendingResourceToLand(input: RemovePendingResourceToLandInput!): RemovePendingResourceToLandPayload
  removePendingResourceToProject(input: RemovePendingResourceToProjectInput!): RemovePendingResourceToProjectPayload
  removePendingResourceToTask(input: RemovePendingResourceToTaskInput!): RemovePendingResourceToTaskPayload
  removeResourceFromLand(input: RemoveResourceFromLandInput!): RemoveResourceFromLandPayload
  removeResourceFromProject(input: RemoveResourceFromProjectInput!): RemoveResourceFromProjectPayload
  removeResourceFromTask(input: RemoveResourceFromTaskInput!): RemoveResourceFromTaskPayload
  unlikeLand(input: UnlikeLandInput!): UnlikeLandPayload
  unlikeProject(input: UnlikeProjectInput!): UnlikeProjectPayload
  unlikeResource(input: UnlikeResourceInput!): UnlikeResourcePayload
  updateLand(input: UpdateLandInput!): UpdateLandPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  updateResource(input: UpdateResourceInput!): UpdateResourcePayload
  updateTask(input: UpdateTaskInput!): UpdateTaskPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
}

input NewLandInput {
  userId: ID!
  name: String!
  description: String!
  category: String!
  image: String
  clientMutationId: String!
}

type NewLandPayload {
  landEdge: LandEdge
  user: User
  master: Master
  clientMutationId: String!
}

input NewProjectInput {
  userId: ID!
  name: String!
  description: String!
  category: String!
  image: String
  clientMutationId: String!
}

type NewProjectPayload {
  projectEdge: ProjectEdge
  user: User
  master: Master
  clientMutationId: String!
}

input NewResourceInput {
  userId: ID!
  name: String!
  description: String!
  category: String!
  image: String
  clientMutationId: String!
}

type NewResourcePayload {
  resourceEdge: ResourceEdge
  user: User
  master: Master
  clientMutationId: String!
}

input NewUserInput {
  name: String!
  email: String!
  image: String
  clientMutationId: String!
}

type NewUserPayload {
  userEdge: UserEdge
  master: Master
  clientMutationId: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PendingResourceToLandInput {
  resourceId: ID!
  landId: ID!
  clientMutationId: String!
}

type PendingResourceToLandPayload {
  landEdge: LandEdge
  resourceEdge: ResourceEdge
  resource: Resource
  land: Land
  clientMutationId: String!
}

input PendingResourceToProjectInput {
  resourceId: ID!
  projectId: ID!
  clientMutationId: String!
}

type PendingResourceToProjectPayload {
  projectEdge: ProjectEdge
  resourceEdge: ResourceEdge
  resource: Resource
  project: Project
  clientMutationId: String!
}

input PendingResourceToTaskInput {
  resourceId: ID!
  taskId: ID!
  clientMutationId: String!
}

type PendingResourceToTaskPayload {
  taskEdge: TaskEdge
  resourceEdge: ResourceEdge
  resource: Resource
  task: Task
  clientMutationId: String!
}

type Project implements Node {
  id: ID!
  name: String
  description: String
  category: String
  lands(after: String, first: Int, before: String, last: Int): LandConnection
  admins(after: String, first: Int, before: String, last: Int): UserConnection
  likedBy(after: String, first: Int, before: String, last: Int): UserConnection
  tasks(after: String, first: Int, before: String, last: Int): TaskConnection
  resources(after: String, first: Int, before: String, last: Int): ResourceConnection
  resourcesPending(after: String, first: Int, before: String, last: Int): ResourceConnection
}

input projectAttributes {
  name: String
  category: String
  description: String
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]
}

type ProjectEdge {
  node: Project
  cursor: String!
}

input RemovePendingResourceToLandInput {
  resourceId: ID!
  landId: ID!
  clientMutationId: String!
}

type RemovePendingResourceToLandPayload {
  removedResourceID: ID
  removedLandID: ID
  resource: Resource
  land: Land
  clientMutationId: String!
}

input RemovePendingResourceToProjectInput {
  resourceId: ID!
  projectId: ID!
  clientMutationId: String!
}

type RemovePendingResourceToProjectPayload {
  removedResourceID: ID
  removedProjectID: ID
  resource: Resource
  project: Project
  clientMutationId: String!
}

input RemovePendingResourceToTaskInput {
  resourceId: ID!
  taskId: ID!
  clientMutationId: String!
}

type RemovePendingResourceToTaskPayload {
  removedResourceID: ID
  removedTaskID: ID
  resource: Resource
  task: Task
  clientMutationId: String!
}

input RemoveResourceFromLandInput {
  resourceId: ID!
  landId: ID!
  clientMutationId: String!
}

type RemoveResourceFromLandPayload {
  removedLandID: ID
  removedResourceID: ID
  resource: Resource
  land: Land
  clientMutationId: String!
}

input RemoveResourceFromProjectInput {
  resourceId: ID!
  projectId: ID!
  clientMutationId: String!
}

type RemoveResourceFromProjectPayload {
  removedProjectID: ID
  removedResourceID: ID
  resource: Resource
  project: Project
  clientMutationId: String!
}

input RemoveResourceFromTaskInput {
  resourceId: ID!
  taskId: ID!
  clientMutationId: String!
}

type RemoveResourceFromTaskPayload {
  removedTaskID: ID
  removedResourceID: ID
  resource: Resource
  task: Task
  clientMutationId: String!
}

type Resource implements Node {
  id: ID!
  name: String
  description: String
  category: String
  image: String
  users(after: String, first: Int, before: String, last: Int): UserConnection
  likedBy(after: String, first: Int, before: String, last: Int): UserConnection
  lands(after: String, first: Int, before: String, last: Int): LandConnection
  landsPending(after: String, first: Int, before: String, last: Int): LandConnection
  tasks(after: String, first: Int, before: String, last: Int): TaskConnection
  tasksPending(after: String, first: Int, before: String, last: Int): TaskConnection
  projects(after: String, first: Int, before: String, last: Int): ProjectConnection
  projectsPending(after: String, first: Int, before: String, last: Int): ProjectConnection
}

input resourceAttributes {
  name: String
  description: String
  category: String
  image: String
}

type ResourceConnection {
  pageInfo: PageInfo!
  edges: [ResourceEdge]
}

type ResourceEdge {
  node: Resource
  cursor: String!
}

type Root {
  land(landId: String): Land
  master: Master
  resource(resourceId: String): Resource
  user(userId: String): User
  viewer: User
  project(projectId: String): Project
  task(taskId: String): Task
  node(id: ID!): Node
}

type Task implements Node {
  id: ID!
  name: String
  description: String
  category: String
  projects(after: String, first: Int, before: String, last: Int): ProjectConnection
  users(after: String, first: Int, before: String, last: Int): UserConnection
  resources(after: String, first: Int, before: String, last: Int): ResourceConnection
  resourcesPending(after: String, first: Int, before: String, last: Int): ResourceConnection
}

input taskAttributes {
  name: String
  category: String
  description: String
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]
}

type TaskEdge {
  node: Task
  cursor: String!
}

input UnlikeLandInput {
  userId: ID!
  landId: ID!
  clientMutationId: String!
}

type UnlikeLandPayload {
  removedUserID: ID
  removedLandID: ID
  user: User
  land: Land
  clientMutationId: String!
}

input UnlikeProjectInput {
  userId: ID!
  projectId: ID!
  clientMutationId: String!
}

type UnlikeProjectPayload {
  removedUserID: ID
  removedProjectID: ID
  user: User
  project: Project
  clientMutationId: String!
}

input UnlikeResourceInput {
  userId: ID!
  resourceId: ID!
  clientMutationId: String!
}

type UnlikeResourcePayload {
  removedUserID: ID
  removedResourceID: ID
  user: User
  resource: Resource
  clientMutationId: String!
}

input UpdateLandInput {
  id: ID!
  attributes: landAttributes
  clientMutationId: String!
}

type UpdateLandPayload {
  land: Land
  clientMutationId: String!
}

input UpdateProjectInput {
  id: ID!
  attributes: projectAttributes
  clientMutationId: String!
}

type UpdateProjectPayload {
  project: Project
  clientMutationId: String!
}

input UpdateResourceInput {
  id: ID!
  attributes: resourceAttributes
  clientMutationId: String!
}

type UpdateResourcePayload {
  resource: Resource
  clientMutationId: String!
}

input UpdateTaskInput {
  id: ID!
  attributes: taskAttributes
  clientMutationId: String!
}

type UpdateTaskPayload {
  task: Task
  clientMutationId: String!
}

input UpdateUserInput {
  id: ID!
  attributes: userAttributes
  clientMutationId: String!
}

type UpdateUserPayload {
  user: User
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  name: String
  email: String
  location: String
  description: String
  image: String
  resources(after: String, first: Int, before: String, last: Int): ResourceConnection
  resourcesLiked(after: String, first: Int, before: String, last: Int): ResourceConnection
  landsAdmin(after: String, first: Int, before: String, last: Int): LandConnection
  landsLiked(after: String, first: Int, before: String, last: Int): LandConnection
  projectsAdmin(after: String, first: Int, before: String, last: Int): ProjectConnection
  projectsLiked(after: String, first: Int, before: String, last: Int): ProjectConnection
  tasks(after: String, first: Int, before: String, last: Int): TaskConnection
}

input userAttributes {
  name: String
  location: String
  description: String
  image: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}
